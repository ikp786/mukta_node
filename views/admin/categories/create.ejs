<%- include('../partials/header') %>
    <%- include('../partials/sidebar') %>

        <main class="main-content position-relative max-height-vh-100 h-100 border-radius-lg ">
            <!-- Navbar -->
            <nav class="navbar navbar-main navbar-expand-lg position-sticky mt-4 top-1 px-0 mx-4 shadow-none border-radius-xl z-index-sticky"
                id="navbarBlur" data-scroll="true">
                <div class="container-fluid py-1 px-3">
                    <div class="sidenav-toggler sidenav-toggler-inner d-xl-block d-none ">
                        <a href="javascript:;" class="nav-link text-body p-0">
                            <div class="sidenav-toggler-inner">
                                <i class="sidenav-toggler-line"></i>
                                <i class="sidenav-toggler-line"></i>
                                <i class="sidenav-toggler-line"></i>
                            </div>
                        </a>
                    </div>
                    <div class="collapse navbar-collapse mt-sm-0 mt-2 me-md-0 me-sm-4" id="navbar">
                        <div class="ms-md-auto pe-md-3 d-flex align-items-center">
                        </div>
                        <ul class="navbar-nav  justify-content-end">
                            <li class="nav-item d-xl-none ps-3 d-flex align-items-center">
                                <a href="javascript:;" class="nav-link text-body p-0" id="iconNavbarSidenav">
                                    <div class="sidenav-toggler-inner">
                                        <i class="sidenav-toggler-line"></i>
                                        <i class="sidenav-toggler-line"></i>
                                        <i class="sidenav-toggler-line"></i>
                                    </div>
                                </a>
                            </li>
                            <li class="nav-item dropdown pe-2 d-flex align-items-center">
                                <a href="javascript:;" class="nav-link text-body p-0" id="dropdownMenuButton"
                                    data-bs-toggle="dropdown" aria-expanded="false">
                                    <i class="fa fa-user cursor-pointer"></i>
                                </a>
                                <ul class="dropdown-menu dropdown-menu-end px-2 py-3 me-sm-n4"
                                    aria-labelledby="dropdownMenuButton">
                                    <li class="">
                                        <a class="dropdown-item border-radius-md" href="javascript:;"
                                            href="{{ route('admin.logout') }}"
                                            onclick="event.preventDefault();document.getElementById('logout-form').submit();">
                                            <div class="d-flex py-0">
                                                <div class="d-flex flex-column justify-content-center">
                                                    <h6 class="text-sm font-weight-normal mb-1">
                                                        <i class="fa fa-sign-out"></i> <span
                                                            class="font-weight-bold">Logout
                                                    </h6>
                                                    <form id="logout-form" action="{{ route('admin.logout') }}"
                                                        method="POST" class="d-none">
                                                        @csrf
                                                    </form>
                                                </div>
                                            </div>
                                        </a>
                                    </li>
                                </ul>
                            </li>
                        </ul>
                    </div>
                </div>
            </nav>
            <!-- End Navbar -->
            <div class="container-fluid py-4">

                <%# @if ($message=Session::get('success')) <div class="btn btn-sm w-100 btn-outline-success ">
                    <strong>{{ $message }}</strong>
            </div>
            @endif
            @if ($message = Session::get('error'))
            <div class="btn btn-sm w-100 btn-outline-danger ">
                <strong>{{ $message }}</strong>
            </div>
            @endif
            @if ($message = Session::get('warning'))
            <div class="btn btn-sm w-100 btn-outline-warning ">
                <strong>{{ $message }}</strong>
            </div>
            @endif

            %>

            <style>
                body {
                    height: 100vh;
                }
            </style>
            <div class="card-header">
                <h5>Category
                    <a href="index" class="btn btn-sm btn-primary float-right">List</a>
                </h5>
            </div>
            <div class="row">
                <div class="col-12">
                    <div id="globe" class="position-absolute end-0 top-0 mt-sm-3 mt-7 me-lg-7">
                        <canvas width="700" height="600"
                            class="w-lg-100 h-lg-100 w-75 h-75 me-lg-0 me-n10 mt-lg-5"></canvas>
                    </div>
                </div>
            </div>
            <div class="card-body pt-0">
                <!-- <form method="post" action="" enctype="multipart/form-data"> -->
                <form action="store" method="post" class="text-start">
                    <div class="row">
                        <div class="col-6">
                            <label class="form-label mt-4">Title</label>
                            <div class="input-group">
                                <input type="text" name="title" class="form-control">
                            </div>
                        </div>
                    </div>
                    <div class="button-row d-flex mt-4">
                        <button class="btn bg-gradient-dark btn-sm ms-auto mb-0 js-btn-next" type="submit"
                            title="Save">Save</button>
                    </div>
                </form>
            </div>
            <footer class="footer pt-3  ">
                <div class="container-fluid">
                    <div class="row align-items-center justify-content-lg-between">
                        <div class="col-lg-6 mb-lg-0 mb-4">
                            <div class="copyright text-center text-sm text-muted text-lg-start">
                                Â©
                                <script>
                                    document.write(new Date().getFullYear())
                                </script>,
                                made with <i class="fa fa-heart"></i> by
                                <a href="https://www.jploft.com/" class="font-weight-bold" target="_blank">JPLoft</a>
                            </div>
                        </div>
                        <div class="col-lg-6">
                            <ul class="nav nav-footer justify-content-center justify-content-lg-end">
                                <li class="nav-item">
                                    <a class="nav-link text-muted" target="_blank"></a>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>
            </footer>
            </div>
        </main>
        <%- include('../partials/script') %>
            <script>
                var ctx = document.getElementById("chart-bars").getContext("2d");
                new Chart(ctx, {
                    type: "bar",
                    data: {
                        labels: ["Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
                        datasets: [{
                            label: "Sales",
                            tension: 0.4,
                            borderWidth: 0,
                            borderRadius: 4,
                            borderSkipped: false,
                            backgroundColor: "#fff",
                            data: [450, 200, 100, 220, 500, 100, 400, 230, 500],
                            maxBarThickness: 6
                        },],
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                                display: false,
                            }
                        },
                        interaction: {
                            intersect: false,
                            mode: 'index',
                        },
                        scales: {
                            y: {
                                grid: {
                                    drawBorder: false,
                                    display: false,
                                    drawOnChartArea: false,
                                    drawTicks: false,
                                },
                                ticks: {
                                    suggestedMin: 0,
                                    suggestedMax: 500,
                                    beginAtZero: true,
                                    padding: 15,
                                    font: {
                                        size: 14,
                                        family: "Open Sans",
                                        style: 'normal',
                                        lineHeight: 2
                                    },
                                    color: "#fff"
                                },
                            },
                            x: {
                                grid: {
                                    drawBorder: false,
                                    display: false,
                                    drawOnChartArea: false,
                                    drawTicks: false
                                },
                                ticks: {
                                    display: false
                                },
                            },
                        },
                    },
                });


                var ctx2 = document.getElementById("chart-line").getContext("2d");

                var gradientStroke1 = ctx2.createLinearGradient(0, 230, 0, 50);

                gradientStroke1.addColorStop(1, 'rgba(203,12,159,0.2)');
                gradientStroke1.addColorStop(0.2, 'rgba(72,72,176,0.0)');
                gradientStroke1.addColorStop(0, 'rgba(203,12,159,0)'); //purple colors

                var gradientStroke2 = ctx2.createLinearGradient(0, 230, 0, 50);

                gradientStroke2.addColorStop(1, 'rgba(20,23,39,0.2)');
                gradientStroke2.addColorStop(0.2, 'rgba(72,72,176,0.0)');
                gradientStroke2.addColorStop(0, 'rgba(20,23,39,0)'); //purple colors

                new Chart(ctx2, {
                    type: "line",
                    data: {
                        labels: ["Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
                        datasets: [{
                            label: "Mobile apps",
                            tension: 0.4,
                            borderWidth: 0,
                            pointRadius: 0,
                            borderColor: "#cb0c9f",
                            borderWidth: 3,
                            backgroundColor: gradientStroke1,
                            fill: true,
                            data: [50, 40, 300, 220, 500, 250, 400, 230, 500],
                            maxBarThickness: 6

                        },
                        {
                            label: "Websites",
                            tension: 0.4,
                            borderWidth: 0,
                            pointRadius: 0,
                            borderColor: "#3A416F",
                            borderWidth: 3,
                            backgroundColor: gradientStroke2,
                            fill: true,
                            data: [30, 90, 40, 140, 290, 290, 340, 230, 400],
                            maxBarThickness: 6
                        },
                        ],
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                                display: false,
                            }
                        },
                        interaction: {
                            intersect: false,
                            mode: 'index',
                        },
                        scales: {
                            y: {
                                grid: {
                                    drawBorder: false,
                                    display: true,
                                    drawOnChartArea: true,
                                    drawTicks: false,
                                    borderDash: [5, 5]
                                },
                                ticks: {
                                    display: true,
                                    padding: 10,
                                    color: '#b2b9bf',
                                    font: {
                                        size: 11,
                                        family: "Open Sans",
                                        style: 'normal',
                                        lineHeight: 2
                                    },
                                }
                            },
                            x: {
                                grid: {
                                    drawBorder: false,
                                    display: false,
                                    drawOnChartArea: false,
                                    drawTicks: false,
                                    borderDash: [5, 5]
                                },
                                ticks: {
                                    display: true,
                                    color: '#b2b9bf',
                                    padding: 20,
                                    font: {
                                        size: 11,
                                        family: "Open Sans",
                                        style: 'normal',
                                        lineHeight: 2
                                    },
                                }
                            },
                        },
                    },
                });


                (function () {
                    const container = document.getElementById("globe");
                    const canvas = container.getElementsByTagName("canvas")[0];

                    const globeRadius = 100;
                    const globeWidth = 4098 / 2;
                    const globeHeight = 1968 / 2;

                    function convertFlatCoordsToSphereCoords(x, y) {
                        let latitude = ((x - globeWidth) / globeWidth) * -180;
                        let longitude = ((y - globeHeight) / globeHeight) * -90;
                        latitude = (latitude * Math.PI) / 180;
                        longitude = (longitude * Math.PI) / 180;
                        const radius = Math.cos(longitude) * globeRadius;

                        return {
                            x: Math.cos(latitude) * radius,
                            y: Math.sin(longitude) * globeRadius,
                            z: Math.sin(latitude) * radius
                        };
                    }

                    function makeMagic(points) {
                        const {
                            width,
                            height
                        } = container.getBoundingClientRect();

                        // 1. Setup scene
                        const scene = new THREE.Scene();
                        // 2. Setup camera
                        const camera = new THREE.PerspectiveCamera(45, width / height);
                        // 3. Setup renderer
                        const renderer = new THREE.WebGLRenderer({
                            canvas,
                            antialias: true
                        });
                        renderer.setSize(width, height);
                        // 4. Add points to canvas
                        // - Single geometry to contain all points.
                        const mergedGeometry = new THREE.Geometry();
                        // - Material that the dots will be made of.
                        const pointGeometry = new THREE.SphereGeometry(0.5, 1, 1);
                        const pointMaterial = new THREE.MeshBasicMaterial({
                            color: "#989db5",
                        });

                        for (let point of points) {
                            const {
                                x,
                                y,
                                z
                            } = convertFlatCoordsToSphereCoords(
                                point.x,
                                point.y,
                                width,
                                height
                            );

                            if (x && y && z) {
                                pointGeometry.translate(x, y, z);
                                mergedGeometry.merge(pointGeometry);
                                pointGeometry.translate(-x, -y, -z);
                            }
                        }

                        const globeShape = new THREE.Mesh(mergedGeometry, pointMaterial);
                        scene.add(globeShape);

                        container.classList.add("peekaboo");

                        // Setup orbital controls
                        camera.orbitControls = new THREE.OrbitControls(camera, canvas);
                        camera.orbitControls.enableKeys = false;
                        camera.orbitControls.enablePan = false;
                        camera.orbitControls.enableZoom = false;
                        camera.orbitControls.enableDamping = false;
                        camera.orbitControls.enableRotate = true;
                        camera.orbitControls.autoRotate = true;
                        camera.position.z = -265;

                        function animate() {
                            // orbitControls.autoRotate is enabled so orbitControls.update
                            // must be called inside animation loop.
                            camera.orbitControls.update();
                            requestAnimationFrame(animate);
                            renderer.render(scene, camera);
                        }
                        animate();
                    }

                    function hasWebGL() {
                        const gl =
                            canvas.getContext("webgl") || canvas.getContext("experimental-webgl");
                        if (gl && gl instanceof WebGLRenderingContext) {
                            return true;
                        } else {
                            return false;
                        }
                    }

                    function init() {
                        if (hasWebGL()) {
                            window
                            window.fetch(
                                "https://raw.githubusercontent.com/creativetimofficial/public-assets/master/soft-ui-dashboard-pro/assets/js/points.json"
                            )
                                .then(response => response.json())
                                .then(data => {
                                    makeMagic(data.points);
                                });
                        }
                    }
                    init();
                })();
            </script>